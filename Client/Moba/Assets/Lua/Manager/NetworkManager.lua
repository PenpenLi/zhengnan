---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zheng.
--- DateTime: 2018/7/9 23:35
--- 网络通信
---

---@class Manager.NetworkManager : Core.LuaMonoBehaviour
---@field public scene Modules.World.Scenes.BaseScene
local LuaMonoBehaviour = require('Core.LuaMonoBehaviour')
local NetworkManager = class("NetworkManager",LuaMonoBehaviour)
local json = require ("cjson")

function NetworkManager:Ctor()
    self.respondMap = {} --同步响应回调
    self.pushMap = {} --异步推送回调

    netMgr:SetLuaFun("OnConnect", handler(self,self.OnConnect))
    netMgr:SetLuaFun("OnConnectFail", handler(self,self.OnConnectFail))
    netMgr:SetLuaFun("OnReConnect", handler(self,self.OnReConnect))
    netMgr:SetLuaFun("OnHttpRspd", handler(self,self.OnHttpRspd))
    netMgr:SetLuaFun("OnJsonRspd", handler(self,self.OnJsonRspd))
end

--添加推送监听
function NetworkManager:AddPush(action, callback)
    if callback ~= nil then
        self:addCallback(action, callback)
    end
end

--添加Http请求
function NetworkManager:HttpRqst(url, action, data, callback)
    if callback ~= nil then
        self:addCallback(action, callback)
    end
    local jsonStr = json.encode(data)
    print("[Send]"..jsonStr)
    netMgr:HttpRequest(url, jsonStr)
end

--异步发送
function NetworkManager:Send(json)
    netMgr:SendJson(json)
end

--同步请求
function NetworkManager:Request(action, json, callback)
    if callback ~= nil then
        self:addCallback(action, callback)
    end
    netMgr:SendJson(json)
end

function NetworkManager:OnConnect()
    print("OnConnect ")
end

function NetworkManager:OnConnectFail()
    print("OnConnectFail ")
end

function NetworkManager:OnReConnect(data)
    print("OnReConnect "..json)
end

function NetworkManager:OnHttpRspd(jsonStr)
    local jsonData = json.decode(jsonStr)
    self:handlerCallback(jsonData.action, jsonData)
end

function NetworkManager:OnJsonRspd(data)
    local jsonStr = json.encode(data)
    print("OnJsonRspd "..jsonStr)
end

function NetworkManager:addCallback(action,handler)
    local callbackList = self.respondMap[action]
    if callbackList == nil then
        callbackList = List.New()
        self.respondMap[action] = callbackList;
    end
    if not callbackList:Contain(handler) then
        callbackList:Add(handler)
    end
end


function NetworkManager:addPushCallback(action,handler)
    local callbackList = self.pushMap[action]
    if callbackList == nil then
        callbackList = List.New()
        self.pushMap[action] = callbackList;
    end
    if not callbackList:Contain(handler) then
        callbackList:Add(handler)
    end
end

function NetworkManager:handlerCallback(action,json)
    if action == nil then
        logError("action is nil")
        return
    end
    local callbackList = self.respondMap[action]
    if callbackList ~= nil then
        for i = 1, callbackList:Size() do
            local callback = callbackList[i]
            if callback then
                callback(json)
            end
        end
    else
        logError("there is no callback with action {0}",action)
    end
end

return NetworkManager