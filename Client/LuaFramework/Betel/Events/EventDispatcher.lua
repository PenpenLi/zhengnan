---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zheng.
--- DateTime: 2019/1/20 1:09
---

---@class Betel.Events.EventDispatcher
---@field New fun() : Betel.Events.EventDispatcher
local EventDispatcher = class("Betel.Events.EventDispatcher")
local _Events = nil

function EventDispatcher:Ctor()
    _Events = {}
end
--[[
        表结构
        {
                type = {
                        Listener1,
                        Listener2
                }
        }
]]
--注册监听事件
function EventDispatcher:AddEventListener(sType, Listener)
    if type(sType) ~= "string" or type(Listener) ~= "function" then
        error("AddEventListener error : type error ", 2)
        return
    end
    --获取_Events里面事件
    local eventList = _Events[sType]

    if eventList == nil then
        eventList = {}
        table.insert(eventList, Listener) --想队列里面插入一个事件
        _Events[sType] = eventList   --放到大表里面
    else
        local func = eventList[Listener]
        if func == nil then
            table.insert(eventList, Listener)
        else
            error("AddEventListener error : Listener hai in")
        end
    end
    return Listener
end


--[[
        触发
        ]]
function EventDispatcher:Dispatcher(sType, ...)
    if type(sType) ~= "string" then
        error("Dispatcher error : sType error", 1)
        return
    end

    local listeners = _Events[sType]
    if listeners == nil or #listeners <= 0 then
        return
    end
    for i, v in ipairs(listeners) do
        v(...)
    end
end


--[[
        移除指定类型的所有关联事件侦听,如果参数为nil则删除当前注册器中所有的函数侦听
        listener ~= nil 删除这个类型里面这个监听
]]
function EventDispatcher:RemoveEventListeners(sType, listener)
    --空删除所有清空表
    if sType == nil then
        --获取keys
        local keys = table.keys(_Events)
        for i, v in ipairs(keys) do
            _Events[v] = nil --设置为空
        end
        return
    end
    if type(sType) ~= "string" then
        error("RemoveEventListeners error : stype no string", 2)
        return
    end
    local typeListeners = _Events[sType] --取出里面所有的这个类型的func
    --根据类型删除
    if listener ~= nil and type(listener) == "function" then
        if typeListeners ~= nil and table.nums(typeListeners) > 0 then
            if typeListeners[listener] ~= nil then
                typeListeners[listener] = nil
            end
        end
        return
    end
    --删除一个类型
    if typeListeners ~= nil then
        _Events[sType] = nil
    end
end

function EventDispatcher:RemoveAllEventListeners(sType)
    if type(sType) ~= "string" then
        error("RemoveEventListeners error : stype no string", 2)
        return
    end
    --空删除所有清空表
    _Events[sType] = nil
end

--function EventDispatcher:DumpEvent()
--    dump(_Events)
--end

return EventDispatcher