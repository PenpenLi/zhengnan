---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zheng.
--- DateTime: 2019/1/20 1:09
---

---@class Core.Events.EventDispatcher
---@field New fun() : Core.Events.EventDispatcher
---@field eventMap table<table, any>
local EventDispatcher = class("Core.Events.EventDispatcher")

local _type = type

function EventDispatcher:Ctor()
    self.eventMap = {}
end
---
---@param type string
---@param callback fun()
---@param caller any
---@return Handler
function EventDispatcher:AddEventListener(type, callback, caller)
    if callback == nil or caller == nil then
        logError("error params! callback or caller can not be nil!")
        return
    end
    if not isString(type) or not isFunction(callback) then
        logError("AddEventListener error : type error ", 2)
        return
    end
    local list = self.eventMap[type]
    if list == nil then
        list = {}
        self.eventMap[type] = list
    else
        for i = 1, #list do
            if list[i].callback == callback and list[i].caller == caller then
                local callerCls = caller == nil and "" or (caller.__classname or "")
                --logWarning(string.format("Re add event listener caller:%s, type:%s",callerCls or "",type))
                return
            end
        end
    end
    local handler = Handler.New(callback, caller)
    --log("add handler " .. tostring(callback))
    table.insert(list, handler)
    return handler
end

---@param type string
---@param callback fun()
---@param caller any
---@return Handler
function EventDispatcher:RemoveEventListener(type, callback, caller)
    if callback == nil or caller == nil then
        logError("Error params! callback or caller can not be nil!")
        return
    end
    if not isString(type) or not isFunction(callback) then
        logError("RemoveEventListener error : type error ", 2)
        return
    end
    local list = self.eventMap[type]
    if list == nil then
        logError("There no event listener name " .. type)
        return
    end
    local handler
    local del = {}
    local len = #list
    for i = 1, len do
        if list[i].callback == callback and list[i].caller == caller then
            handler = list[i]
            table.insert(del, i)
            break
        end
    end
    for i = 1, #del do
        table.remove(list, del[i])
    end
    if handler == nil then
        --logError("not found handler " .. tostring(callback))
        return
    end
    return handler
end

---@param event Core.Events.Event
function EventDispatcher:DispatchEvent(event, ...)
    if event == nil then
        error("Dispatcher error : event is nil", 1)
        return
    end
    local list = self.eventMap[event.type]
    if list ~= nil then
        -- 当前节点有侦听该事件
        local len = #list
        if len > 0 then
            list = copy(list)
            for i = 1, len do
                local handler = list[i] ---@type Handler
                handler:Execute(event, ...)
            end
        end
    end
end

function EventDispatcher:RemoveAllEventListeners(type)
    if _type(type) ~= "string" then
        error("RemoveEventListeners error : type no string", 2)
        return
    end
    --空删除所有清空表
    self.eventMap[type] = nil
end

--function EventDispatcher:DumpEvent()
--    dump(_Events)
--end

return EventDispatcher