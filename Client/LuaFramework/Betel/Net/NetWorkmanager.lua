---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zheng.
--- DateTime: 2018/7/9 23:35
--- 网络通信
---

--请求接口数据
---@class RequestData
---@field New fun(command:string, ...):RequestData
---@field command string @ 这条请求的接口名称
---@field fields table<number, any> @ 参数名称列表
---@field modal boolean @ 通信时，是否需要模态，默认：true
---@field requestId number @ 请求的代号（自增长）
---@field server string @ 服务器信息。默认：Request.S_gameServer
---@field handler fun(json:table)

local ReignRequest = Framework.ReignRequest
local json = require("cjson")
local NetworkListener = require("Core.Net.NetworkListener")
local LuaMonoBehaviour = require('Core.LuaMonoBehaviour')
---@class Core.Net.NetworkManager : Core.LuaMonoBehaviour
---@field public listenerList table<number,Core.Net.NetworkListener>
local NetworkManager = class("NetworkManager", LuaMonoBehaviour)

local RequsetId = 1

local Gateway = "gateway"
local GameServer = "gameServer"

function NetworkManager:Ctor()
    self.listenerList = List.New() ---@type List
    self.listener = NetworkListener.New(true)
    self.listenerList:Add(self.listener)

    netMgr:SetCompress(true)
    netMgr:SetLuaFun("OnReConnect", handler(self, self.OnReConnect))
    netMgr:SetLuaFun("OnHttpRspd", handler(self, self.OnHttpRspd))
    netMgr:SetLuaFun("OnJsonRspd", handler(self, self.OnJsonRspd))
end

function NetworkManager:Connect(host, port, onConnectSuccess, onConnectFail)
    netMgr:SetLuaFun("OnConnect", onConnectSuccess)
    netMgr:SetLuaFun("OnConnectFail", onConnectFail)
    netMgr:Connect(host, port)
end

function NetworkManager:OnConnectFail()
    print("OnConnectFail ")
end

function NetworkManager:OnReConnect(data)
    print("OnReConnect " .. json)
end

--添加监听器
function NetworkManager:AddListener(listener)
    if not self.listenerList:Contain(listener) then
        self.listenerList:Add(listener)
    end
end

--移除监听器
function NetworkManager:RemoveListener(listener)
    if self.listenerList:Contain(listener) then
        self.listenerList:Remove(listener)
    end
end

--添加推送监听
---@param p ProtocolInfo
function NetworkManager:AddPush(p, callback)
    if callback ~= nil then
        self.listener:addPushCallback(p, callback)
    end
end

--添加Http请求
function NetworkManager:HttpRqst(url, data, params, callback)
    if callback ~= nil then
        self.listener:addCallback(data.action, callback)
    end
    data = self:parseParams(data,params)
    local jsonStr = json.encode(data)
    print("[Http Rqst]" .. jsonStr)
    netMgr:HttpRequest(url, jsonStr)
end

--异步发送
function NetworkManager:Send(json)
    netMgr:SendJson(json)
end

--Json请求
---@param protocol ProtocolInfo
---@param params table<number, any>
---@param callback Handler
---@param failCallback Handler
function NetworkManager:SendRequest(protocol, params, callback, failCallback)
    local rqstData = {} ---@type RequestData
    rqstData.command = protocol.command
    rqstData.fields = protocol.fields
    rqstData.server = protocol.server
    self:ReignRequest(rqstData, params, function(response)
        if response.state == 0 then
            -- 请求失败
            logError("请求失败")
        elseif response.state == 1 then
            -- 请求成功
            if callback then
                if isFunction(callback) then
                    callback(response.data)
                else
                    callback:Execute(response.data)
                end
            end
        elseif response.state == 2 then
            -- 后端处理请求出现异常
            if response.data.msg then
                logError(response.data.msg)
                Tips.Show(response.data.msg)
            end
            if failCallback then
                if isFunction(callback) then
                    failCallback(response.data)
                else
                    failCallback:Execute(response.data)
                end
            end
        elseif response.state == 3 then
            -- 后端推送
        elseif response.state == 4 then
            -- 未登录或登录超时
            logError("未登录或登录超时")
        end
    end)
end

--同步请求
---@param data RequestData
---@param params table<number, any>
---@param callback fun()
function NetworkManager:ReignRequest(data, params, callback)
    data.requestId = RequsetId
    if callback ~= nil then
        self.listener:addCallback(data, callback)
    end
    local content = self:parseParams(data,params)
    local rqst = ReignRequest.New(1,1,data.command, content, RequsetId)
    RequsetId = RequsetId + 1
    log("<color=#FFFF00FF>[Send]</color>{0}-{1} content:{2}",
            data.command,
            data.requestId,
            content)
    netMgr:SendRequest(rqst)
end

function NetworkManager:OnHttpRspd(jsonStr)
    local jsonData = json.decode(jsonStr)
    for i = 1, self.listenerList:Size() do
        self.listenerList[i]:handlerRqstCallback(jsonData.action, jsonData)
    end
end

---@param response Framework.ReignResponse
function NetworkManager:OnJsonRspd(response)
    local content = response.content
    local command = response.command
    local requestId = response.requestId
    local jsonData = json.decode(content)
    log("<color=#df5c4aFF>[Rspd]</color><color=#FFFFFFFF>{0}-{1} content:{2}</color>",
            command,
            requestId,
            content)
    for i = 1, self.listenerList:Size() do
        if jsonData.state == 3 then
            self.listenerList[i]:handlerPushCallback(command, jsonData)
        else
            self.listenerList[i]:handlerRqstCallback(command, jsonData, requestId)
        end
    end
end

---@param data RequestData
function NetworkManager:parseParams(data,values)
    local params = ""
    if values and data.fields then
        for i = 1, #data.fields do
            if i > 1 then params = params .. "&" end
            params = params .. data.fields[i] .. "=" .. tostring(values[i])
        end
    end
    --data = self:removeElementByKey(data,"fields")
    --data.client = "Unity"
    return params
end


-- 删除table中的元素
function NetworkManager:removeElementByKey(tbl,key)
    --新建一个临时的table
    local tmp ={}

    --把每个key做一个下标，保存到临时的table中，转换成{1=a,2=c,3=b}
    --组成一个有顺序的table，才能在while循环准备时使用#table
    for i in pairs(tbl) do
        table.insert(tmp,i)
    end

    local newTbl = {}
    --使用while循环剔除不需要的元素
    local i = 1
    while i <= #tmp do
        local val = tmp [i]
        if val == key then
            --如果是需要剔除则remove
            table.remove(tmp,i)
        else
            --如果不是剔除，放入新的tabl中
            newTbl[val] = tbl[val]
            i = i + 1
        end
    end
    return newTbl
end


--创建协议接口 Create Protocol
---@return ProtocolInfo
function NetworkManager.CreateProtocol(command, ...)
    local protocol = {} ---@type ProtocolInfo
    protocol.command = command
    protocol.server = GameServer

    local fields = { ... }
    if #fields == 0 then
        fields = nil
    end
    protocol.fields = fields
    return protocol
end

return NetworkManager