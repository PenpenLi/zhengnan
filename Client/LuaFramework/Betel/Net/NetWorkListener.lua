---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zheng.
--- DateTime: 2018/8/11 22:19
--- 网络监听器
---


local LuaMonoBehaviour = require('Core.LuaMonoBehaviour')
---@class Core.Net.NetworkListener : Core.LuaMonoBehaviour
---@field respondMap table<string, List | table<number, RequestData>>
---@field pushMap table<string, List | table<number, RequestData>>
local NetworkListener = class("NetworkListener",LuaMonoBehaviour)

function NetworkListener:Ctor(errorReport)
    self.errorReport = errorReport --是否输出错误报告
    self.respondMap = {} --同步响应回调
    self.pushMap = {} --异步推送回调
end

---@param data RequestData
function NetworkListener:addCallback(data, handler)
    local callbackList = self.respondMap[data.command]
    if callbackList == nil then
        callbackList = List.New()
        self.respondMap[data.command] = callbackList;
    end
    data.handler = handler
    if not callbackList:Contain(data) then
        callbackList:Add(data)
    else
        logError("Repeat handler " .. tostring(handler))
    end
end

---@param p ProtocolInfo
function NetworkListener:addPushCallback(p, handler)
    local callbackList = self.pushMap[p.command]
    if callbackList == nil then
        callbackList = List.New()
        self.pushMap[p.command] = callbackList;
    end
    if not callbackList:Contain(handler) then
        callbackList:Add(handler)
    end
end

function NetworkListener:removePushCallback(command, handler)
    local pushCallbackList = self.pushMap[command]
    if pushCallbackList ~= nil then
        for i = 1, pushCallbackList:Size() do
            if pushCallbackList[i] == handler then
                pushCallbackList:Remove(handler)
                break;
            end
        end
    end
end

function NetworkListener:handlerPushCallback(command, json)
    if command == nil then
        logError("push command is nil")
        return
    end
    local pushCallbackList = self.pushMap[command]
    if pushCallbackList ~= nil then
        for i = 1, pushCallbackList:Size() do
            local callback = pushCallbackList[i]
            if callback then
                callback(json.data)
            end
        end
        --self.pushMap[action] = nil
    else
        if self.errorReport then
            logError("there is no push listener with command {0}", command)
        end
    end
end

function NetworkListener:handlerRqstCallback(command, json, requestId)
    if command == nil then
        logError("rqst command is nil")
        return
    end
    local rqstCallbackList = self.respondMap[command]
    if rqstCallbackList ~= nil then
        for i = 1, rqstCallbackList:Size() do
            local request = rqstCallbackList[i]
            if request and request.requestId == requestId then
                if request.handler then
                    request.handler(json)
                end
                rqstCallbackList:Remove(request)
                break
            end
        end
        if rqstCallbackList:Size() == 0 then
            self.respondMap[command] = nil
        end
    else
        if self.errorReport then
            logError("there is no rqst callback with command {0}", command)
        end
    end
end


return NetworkListener