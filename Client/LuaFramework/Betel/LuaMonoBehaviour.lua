---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zheng.
--- DateTime: 2018/6/14 0:22
--- LuaMonoBehaviour
---


local LuaObject = require("Betel.LuaObject")

---@class Betel.LuaMonoBehaviour : Betel.LuaObject
---@field gameObject UnityEngine.GameObject
---@field transform UnityEngine.Transform
---@field sequenceList List | table<number, DG.Tweening.Sequence>
---@field delayList List | table<number, Handler>
---@field delayFrameFunList List | table<number, Handler>
---@field globalEdpEventMap List | table<number, table> 全局时间派发器
local LuaMonoBehaviour = class("Betel.LuaMonoBehaviour",LuaObject)

local co_id = 1

---@param gameObject UnityEngine.GameObject
function LuaMonoBehaviour:Ctor(gameObject)
    self.gameObject = gameObject
    if not isNull(gameObject) then
        self.transform = gameObject.transform
    end
end

function LuaMonoBehaviour:AddLuaMonoBehaviour(go,name)
    for k, v in pairs(BehaviourFun) do
        if self[v] and isFunction(self[v]) then
            LuaHelper.AddLuaMonoBehaviour(go,name,v,handler(self,self[v]))
        end
    end
end

function LuaMonoBehaviour:AddGlobalEventListener(type, handler)
    if self.globalEdpEventMap == nil then
        self.globalEdpEventMap = {}
    end
    if self.globalEdpEventMap[handler] == nil then
        self.globalEdpEventMap[handler] = { type = type, handler = handler}
        edp:AddEventListener(type, self.globalEdpEventMap[handler].handler, self)
    end
end

function LuaMonoBehaviour:RemoveGlobalEventListener(type, handler)
    if self.globalEdpEventMap and self.globalEdpEventMap[handler] then
        edp:RemoveEventListener(type, self.globalEdpEventMap[handler].handler, self)
        self.globalEdpEventMap[handler] = nil
    end
end

---@param coFun fun()
function LuaMonoBehaviour:StartCoroutine(coFun)
    local co
    co = coroutine.start(function ()
        coFun()
    end)
    if self.coMap == nil then
        self.coMap = {}
        setmetatable(self.coMap, {__mode = "kv"})
    end
    --if self.gameObject then
    --self.coList[co] = self.gameObject.name .. " Widget:CO"
    --else
    self.coMap[co] = co_id
    co_id = co_id + 1
    --end
    return co
end

---@param delay number
---@param callback fun()
---@param ignoreTimeScale boolean
function LuaMonoBehaviour:CreateDelay(delay, callback,ignoreTimeScale)
    if self.delayList == nil then
        self.delayList = List.New()
    end
    if not isNumber(delay) or not isFunction(callback) or delay == nil or callback == nil then
        logError("Delay fun params is wrong")
        return
    end
    local delayFun ---@type Handler
    delayFun = DelayCallback(delay,Handler.New(function ()
        callback()
        CancelDelayCallback(delayFun)
        if self.delayList then
            self.delayList:Remove(delayFun)
        end
        delayFun:Recycl()
    end, self),ignoreTimeScale)
    self.delayList:Add(delayFun)
    return delayFun
end

---@param callback fun() | Handler
---@param frameCount number 延迟帧数
---@return Handler
function LuaMonoBehaviour:CreateDelayedFrameCall(callback, frameCount)
    if self.delayFrameFunList == nil then
        self.delayFrameFunList = List.New()
    end
    local delayFun ---@type Handler
    delayFun = DelayedFrameCall(function ()
        invoke(callback)
        CancelDelayCallback(delayFun)
        self.delayFrameFunList:Remove(delayFun)
        delayFun:Recycl()
    end,self, frameCount)
    self.delayFrameFunList:Add(delayFun)
    return delayFun
end

---@return DG.Tweening.Sequence
function LuaMonoBehaviour:CreateSequence()
    if self.sequenceList == nil then
        self.sequenceList = {}
    end
    local sequence = DOTween.Sequence()
    table.insert(self.sequenceList, sequence)
    return sequence
end

function LuaMonoBehaviour:Dispose()
    if self.coMap then
        for co, id in pairs(self.coMap) do
            coroutine.stop(co)
        end
    end
    if self.globalEdpEventMap then
        for _, event in pairs(self.globalEdpEventMap) do
            edp:RemoveEventListener(event.type, event.handler, self)
        end
    end
    if self.delayList then
        for i = 1, self.delayList:Size() do
            CancelDelayCallback(self.delayList[i])
        end
        self.delayList:Clear()
    end
    if self.delayFrameFunList then
        for i = 1, self.delayFrameFunList:Size() do
            CancelDelayCallback(self.delayFrameFunList[i])
        end
        self.delayFrameFunList:Clear()
    end
    if self.sequenceList then
        for _, s in pairs(self.sequenceList) do
            s:Kill()
        end
    end
    self.coMap = nil
    self.globalEdpEventMap = nil
    self.delayList = nil
    self.delayFrameFunList = nil
    self.sequenceList = nil
end

function LuaMonoBehaviour:Destroy()
    Destroy(self.gameObject)
    self:Dispose()
end

function LuaMonoBehaviour:OnDestroy()

end

return LuaMonoBehaviour