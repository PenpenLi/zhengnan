---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zheng.
--- DateTime: 2019/1/9 1:33
---

Res = {}

Res.SpriteCache = {}

assetsMgr = Framework.GameManager.GetAssetsManager()

---@param path string
---@return UnityEngine.Material
function Res.UnloadAssetBundle(path, unloadAllDependence, unloadAllLoadedObjects)
    unloadAllDependence = unloadAllDependence or false
    unloadAllLoadedObjects = unloadAllLoadedObjects or false
    return assetsMgr:UnloadAssetBundle(path, unloadAllDependence, unloadAllLoadedObjects);
end


---@param path string
---@return UnityEngine.Material
function Res.LoadAsset(path)
    return assetsMgr:LoadObject(path);
end

---@param path string
---@return UnityEngine.Material
function Res.LoadObjectAsync(path, callback)
    return assetsMgr:LoadObjectAsync(path, callback);
end

---@param path string
---@return string
function Res.LoadText(path)
    return assetsMgr:LoadText(path);
end

---@param path string
---@return UnityEngine.GameObject
function Res.LoadPrefab(path)
    return assetsMgr:LoadPrefab(path);
end

---@param path string
---@return UnityEngine.GameObject
function Res.LoadPrefabAsync(path, callback)
    return assetsMgr:LoadPrefabAsync(path, callback);
end

---@param path string
---@return UnityEngine.Sprite
function Res.LoadSprite(path)
    local sp = Res.SpriteCache[path]
    if sp == nil then
        sp = assetsMgr:LoadSprite(path)
        Res.SpriteCache[path] = sp
    end
    return sp;
end

---@param path string
---@return UnityEngine.Sprite
function Res.LoadSingleSprite(path)
    return assetsMgr:LoadSingleSprite(path);
end

---@param path string
---@return UnityEngine.Texture
function Res.LoadTexture(path)
    return assetsMgr:LoadTexture(path);
end

---@param path string
---@return UnityEngine.Material
function Res.LoadMaterial(path)
    return assetsMgr:LoadMaterial(path);
end

---@param path string
---@return UnityEngine.Material
function Res.LoadMesh(path)
    return assetsMgr:LoadMesh(path);
end

---@param path string
---@return UnityEngine.Material
function Res.LoadShader(path)
    return assetsMgr:LoadShader(path);
end

---@param path string
---@param callback Handler
---@return UnityEngine.AudioClip
function Res.LoadAudioClipAsync(path, callback)
    return assetsMgr:LoadAudioClipAsync(path, function(audioClip)
        callback:Execute(audioClip)
        callback:Recycl()
    end);
end

---@param path string
---@return UnityEngine.RuntimeAnimatorController
function Res.LoadAnimatorController(path)
    return assetsMgr:LoadAnimatorController(path);
end