---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zheng.
--- DateTime: 2018/6/10 21:15
---
--[[
function class(className, super)
    local superType = type(super)
    local cls

    if superType ~= "function" and superType ~= "table" then
        superType = nil
        super = nil
    end

    if superType == "function" or (super and super.__ctype == 1) then
        -- inherited from native C++ Object
        cls = {}

        if superType == "table" then
            -- copy fields from super
            for k,v in pairs(super) do cls[k] = v end
            cls.__create = super.__create
            cls.super    = super
        else
            cls.__create = super
            cls.ctor = function() end
        end

        cls.__classname = className
        cls.__ctype = 1

        function cls.New(...)
            local instance = cls.__create(...)
            -- copy fields from class to native object
            for k,v in pairs(cls) do instance[k] = v end
            instance.class = cls
            instance:Ctor(...)
            return instance
        end

    else
        -- inherited from Lua Object
        if super then
            cls = {}
            setmetatable(cls, {__index = super})
            cls.super = super
        else
            cls = {ctor = function() end}
        end

        cls.__classname = className
        cls.__ctype = 2 -- lua
        cls.__index = cls

        function cls.New(...)
            local instance = setmetatable({}, cls)
            for k,v in pairs(cls) do instance[k] = v end
            instance.class = cls
            instance:Ctor(...)
            return instance
        end
    end

    return cls
end
]]--

local setmetatable = setmetatable

--type(v) 用来判断v的类型
--"nil", "number", "string", "boolean", "table", "function", "thread", "userdata"
local __NIL = "nil"
local __Number = "number"
local __String = "string"
local __Boolean = "boolean"
local __Table = "table"
local __Function = "function"
local __Thread = "thread"
local __Userdata = "userdata"

---Lua class
--- 父类的方法调用 Class.super.Func(self,...) 错误使用 Class.super:Func(...)
---@param className string
---@param super table
---@return table
function class(className, super)
    local cls = {}
    cls.__classname = className
    cls.__class = cls
    cls.__index = cls

    if super ~= nil then
        setmetatable(cls, super)
        cls.super = super
    else
        cls.Ctor = function()
            --Do nothing
        end
    end

    function cls.New(...)
        local instance = setmetatable({}, cls)
        for k,v in pairs(cls) do
            instance[k] = v
        end
        instance:Ctor(...)
        --print("className " .. className)
        return instance
    end
    return cls
end

--- 浅拷贝 table
---@param from table
---@param to table
---@return table
function copy(from, to)
    to = to or {}
    for k, v in pairs(from) do
        to[k] = v
    end
    return to
end

--- 深度克隆
---@param object table 要克隆的值
---@return table 返回值的副本
function clone( object )
    local lookup_table = {}
    local function copyObj( object )
        if type( object ) ~= "table" then
            return object
        elseif lookup_table[object] then
            return lookup_table[object]
        end

        local new_table = {}
        lookup_table[object] = new_table
        for key, value in pairs( object ) do
            new_table[copyObj( key )] = copyObj( value )
        end
        return setmetatable( new_table, getmetatable( object ) )
    end
    return copyObj( object )
end

function table2json(t)
    local function serialize(tbl)
        local tmp = {}
        for k, v in pairs(tbl) do
            local k_type = type(k)
            local v_type = type(v)
            local key = (k_type == "string" and "\"" .. k .. "\":")
                    or (k_type == "number" and "")
            local value = (v_type == "table" and serialize(v))
                    or (v_type == "boolean" and tostring(v))
                    or (v_type == "string" and "\"" .. v .. "\"")
                    or (v_type == "number" and v)
            tmp[#tmp + 1] = key and value and tostring(key) .. tostring(value) or nil
        end
        if table.maxn(tbl) == 0 then
            return "{" .. table.concat(tmp, ",") .. "}"
        else
            return "[" .. table.concat(tmp, ",") .. "]"
        end
    end
    assert(type(t) == "table")
    return serialize(t)
end

---回调
function invoke(fun,...)
    if fun ~= nil then
        if isFunction(fun) then
            fun(...)
        else
            fun:Execute(...)
        end
    end
end

---回调
function handler(caller,method)
    --if method == nil then
    --    logError("method is nil")
    --end
    return function (...)
        return method(caller, ...)
    end
end

---是否为Number对象
function isNumber(tbl)
    if tbl == nil then
        return false
    else
        return type(tbl) == __Number
    end
end

---是否为Boolean对象
function isBoolean(tbl)
    if tbl == nil then
        return false
    elseif isString(tbl) then
        return string.lower(tbl) == "true" or string.lower(tbl) == "false"
    else
        return type(tbl) == __Boolean
    end
end
---是否为String对象
function isString(tbl)
    if tbl == nil then
        return false
    else
        return type(tbl) == __String
    end
end

---是否为Function对象
function isFunction(tbl)
    if tbl == nil then
        return false
    else
        return type(tbl) == __Function
    end
end

---是否为Table对象
function isTable(tbl)
    if tbl == nil then
        return false
    else
        return type(tbl) == __Table
    end
end

---是否为Unity空对象
function isNull(obj)
    if obj == nil then
        return true
    else
        return LuaHelper.isNullObj(obj)
    end
end

---是否为Unity空对象
function isnull(obj)
    if obj == nil then
        return true
    else
        return LuaHelper.isNullObj(obj)
    end
end

---是否空字符串
function isEmpty(obj)
    if obj == nil then
        return true
    else
        return obj == ""
    end
end

---异步销毁
---@param obj UnityEngine.GameObject
---@param delay number 延时销毁
function Destroy(obj,delay)
    delay = delay or 0
    GameObject.Destroy(obj,delay)
end

---同步销毁
---@param obj UnityEngine.GameObject
function destroyImmediate(obj)
    GameObject.DestroyImmediate(obj)
end

---标志不销毁对象
---@param obj UnityEngine.GameObject
function dontDestroyOnLoad(obj)
    GameObject.DontDestroyOnLoad(obj)
end

---实例化或者复制对象
---@param obj string|UnityEngine.GameObject
---@param parent UnityEngine.Transform
---@return UnityEngine.GameObject
function Instantiate(obj,parent)
    local newObj
    if isString(obj) then
        newObj = GameObject.Instantiate(Res.LoadPrefab(obj))
    else
        newObj = GameObject.Instantiate(obj) ---@type UnityEngine.GameObject
    end
    if not isNull(parent) then
        newObj.transform:SetParent(parent)
    end
    return newObj
end